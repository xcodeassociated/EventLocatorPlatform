version: "3"
services:
  postgres:
    image: postgres:latest
    container_name: "postgres"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
      - ./entrypoint/postgres-entrypoint/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - int-dev-net

  postgres-keycloak:
    image: postgres:latest
    volumes:
      - ./volumes/postgres_data_keycloak:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - 5433:5432
    networks:
      - int-dev-net

  keycloak:
    image: xcodeassociated/spochi-keycloak:0.0.1
    environment:
      DB_ADDR: postgres-keycloak
      DB_PORT: 5432
      DB_VENDOR: POSTGRES
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: keycloak
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      PROXY_ADDRESS_FORWARDING: 'true'
    command: ["-b", "0.0.0.0", "-Dkeycloak.profile.feature.docker=enabled"]
    ports:
      - 9090:8080
    expose:
      - "9090"
    depends_on:
      - postgres-keycloak
      - dev-kafka-broker-1
    links:
      - "postgres-keycloak:postgres-keycloak"
      - "dev-kafka-broker-1:dev-kafka-broker-1"
    networks:
      - int-dev-net

  grafana:
    image: grafana/grafana:6.2.2
    ports:
      - "4000:3000"
    links:
      - "influxdb:influxdb"
    volumes:
      - ./grafana/influxdb.yaml:/etc/grafana/provisioning/datasources/influxdb.yaml
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./grafana/UserServiceDashboard.json:/var/lib/grafana/dashboards/UserService.json
      - ./grafana/EventServiceDashboard.json:/var/lib/grafana/dashboards/EventService.json
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - "influxdb"
    restart: on-failure
    networks:
      - int-dev-net

  influxdb:
    image: influxdb:1.7.6
    ports:
      - "8086:8086"
    volumes:
      - ./entrypoint/infulx-entrypoint/influx_init.iql:/docker-entrypoint-initdb.d/influx_init.iql/
      - ./volumes/infux-data:/var/lib/influxdb
    environment:
      INFLUXDB_HTTP_AUTH_ENABLED: "true"
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: secret
    restart: on-failure
    networks:
      - int-dev-net

  elasticsearch:
    build: elk/elasticsearch/
    image: xcodeassociated/elasticsearch:0.0.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    restart: on-failure
    networks:
      - int-dev-net

  logstash:
    build: elk/logstash/
    image: xcodeassociated/logstash:0.0.1
    container_name: logstash
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./elk/logstash/config:/etc/logstash/conf.d
    ports:
      - "9100:9100"
    expose:
      - "9100"
    links:
      - elasticsearch
    depends_on:
      - "elasticsearch"
    restart: on-failure
    networks:
      - int-dev-net

  kibana:
    build: elk/kibana/
    image: xcodeassociated/kibana:0.0.1
    container_name: kibana
    volumes:
      - ./elk/kibana/config/:/opt/kibana/config/
    ports:
      - "5601:5601"
    expose:
      - "5601"
    links:
      - elasticsearch
    depends_on:
      - "elasticsearch"
      - "logstash"
    restart: on-failure
    networks:
      - int-dev-net

  eureka-service:
    image: xcodeassociated/spochi-eureka-service:0.0.1
    build:
      context: ./services/discovery_service
      dockerfile: Dockerfile-build
    healthcheck:
      test: ["CMD", "curl", "-f","http://eureka-service:8761/actuator/health"]
      interval: 10s
      timeout: 30s
      retries: 10
    restart: always
    expose:
      - "8761"
    ports:
      - "8761:8761"
    networks:
      - int-dev-net

  dev-kafka-zookeeper:
    container_name: dev-kafka-zookeeper
    hostname: dev-kafka-zookeeper
    restart: unless-stopped
    image: wurstmeister/zookeeper
    ports:
      - "127.0.0.1:2181:2181"
    volumes:
      - ./volumes/dev-kafka-zookeeper-data:/data
    networks:
      - int-dev-net

  dev-kafka-broker-1:
    container_name: dev-kafka-broker-1
    hostname: dev-kafka-broker-1
    restart: unless-stopped
    image: wurstmeister/kafka
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: dev-kafka-broker-1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: dev-kafka-zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "dev_sample_topic:1:1:compact"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/dev-kafka-data:/kafka
    networks:
      - int-dev-net

  mongo0:
    image: mongo:latest
    container_name: mongo0
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=mongo
      - MONGO_NON_ROOT_USERNAME=user
      - MONGO_NON_ROOT_PASSWORD=user
    expose:
      - "27017"
    ports:
      - "27017:27017"
    volumes:
      - ./volumes/mongo/mongo-data-0:/data/db
      - ./volumes/mongo/mongo-db-config-0:/data/configdb
      - ./entrypoint/mongodb-entrypoint/single/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    restart: always
    networks:
      - int-dev-net

  redis:
    container_name: redis
    hostname: redis
    image: "redis:latest"
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis-data:/data
    networks:
      - int-dev-net

  event-service:
    image: xcodeassociated/spochi-event-service:0.0.1
    depends_on:
      - "logstash"
      - "influxdb"
      - "keycloak"
      - "dev-kafka-zookeeper"
      - "dev-kafka-broker-1"
      - "mongo0"
      - "redis"
      - "eureka-service"
    external_links:
      - "eureka-service:eureka-service"
      - "influxdb:influxdb"
      - "logstash:logstash"
      - "keycloak:keycloak"
      - "dev-kafka-zookeeper:dev-kafka-zookeeper"
      - "dev-kafka-broker-1:dev-kafka-broker-1"
      - "mongo0:mongo0"
      - "redis:redis"
    build:
      context: ./services/event_service
      dockerfile: Dockerfile-build
    expose:
      - "8083"
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD", "curl", "-f","http://event-service:8083/actuator/health"]
      interval: 10s
      timeout: 30s
      retries: 10
    restart: always
    environment:
      - WAIT_HOSTS=eureka-service:8761/actuator/health
    networks:
      - int-dev-net

  user-service:
    image: xcodeassociated/spochi-user-service:0.0.1
    depends_on:
      - "eureka-service"
      - "postgres"
      - "logstash"
      - "influxdb"
      - "keycloak"
      - "dev-kafka-zookeeper"
      - "dev-kafka-broker-1"
    external_links:
      - "postgres:postgres"
      - "eureka-service:eureka-service"
      - "influxdb:influxdb"
      - "logstash:logstash"
      - "keycloak:keycloak"
      - "dev-kafka-zookeeper:dev-kafka-zookeeper"
      - "dev-kafka-broker-1:dev-kafka-broker-1"
    build:
      context: ./services/CloudNativeTemplateService
      dockerfile: Dockerfile-build
    expose:
      - "8082"
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-f","http://user-service:8082/actuator/health"]
      interval: 10s
      timeout: 30s
      retries: 10
    restart: always
    environment:
      - WAIT_HOSTS=eureka-service:8761/actuator/health
    networks:
      - int-dev-net

  web-service:
    image: xcodeassociated/spochi-web-service:0.0.1
    depends_on:
      - "user-service"
      - "event-service"
      - "keycloak"
    build:
      context: ./services/CloudNativeEventLocatorWeb
      dockerfile: Dockerfile
    expose:
      - "3000"
      - "8090"
    ports:
      - "3000:3000"
    restart: always
    networks:
      - int-dev-net

networks:
    int-dev-net:
        driver: bridge
